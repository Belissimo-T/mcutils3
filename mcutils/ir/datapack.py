import dataclasses
import pathlib

import beet

from mcutils import strings
from mcutils.ir import commands
from mcutils.location import Location


@dataclasses.dataclass
class Datapack:
    name: str
    namespaces: dict[str, commands.CompileNamespace]
    description: str = "A Datapack generated by the mcutils_reborn module."
    pack_format: int = -2

    def export(self, path: pathlib.Path) -> beet.DataPack:
        out = beet.DataPack(
            name=self.name,
            path=path / self.name,
            zipped=False,
            description=self.description,
            pack_format=self.pack_format,
        )

        for ns_name, namespace in self.namespaces.items():
            for func_name, func in namespace.command_functions.items():
                for mcfunc_name, mcfunc in func.mcfunctions.items():
                    mcfunc.location = Location(ns_name, func_name + mcfunc_name)

        string_resolver = strings.StringResolver()

        for ns_name, namespace in self.namespaces.items():
            for func_name, func in namespace.command_functions.items():
                for mcfunc_name, mcfunc in func.mcfunctions.items():
                    commands = list(map(string_resolver.resolve_identifier, mcfunc.commands))

                    # noinspection PyTypeChecker
                    out[mcfunc.location.to_str()] = beet.Function("\n".join(commands), tags=[])

        out.save(overwrite=True)

        return out
